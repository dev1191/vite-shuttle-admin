/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[role]/dashboard/': RouteRecordInfo<'/[role]/dashboard/', '/:role/dashboard', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/drivers/': RouteRecordInfo<'/[role]/drivers/', '/:role/drivers', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/eagle-eye/': RouteRecordInfo<'/[role]/eagle-eye/', '/:role/eagle-eye', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/help-and-supports/': RouteRecordInfo<'/[role]/help-and-supports/', '/:role/help-and-supports', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/manage-drivers/': RouteRecordInfo<'/[role]/manage-drivers/', '/:role/manage-drivers', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/manage-drivers/create': RouteRecordInfo<'/[role]/manage-drivers/create', '/:role/manage-drivers/create', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/manage-offers/': RouteRecordInfo<'/[role]/manage-offers/', '/:role/manage-offers', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/manage-passes/': RouteRecordInfo<'/[role]/manage-passes/', '/:role/manage-passes', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/manage-trips/[booking]/': RouteRecordInfo<'/[role]/manage-trips/[booking]/', '/:role/manage-trips/:booking', { role: ParamValue<true>, booking: ParamValue<true> }, { role: ParamValue<false>, booking: ParamValue<false> }>,
    '/[role]/manage-users/roles/': RouteRecordInfo<'/[role]/manage-users/roles/', '/:role/manage-users/roles', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/manage-users/roles/[id]': RouteRecordInfo<'/[role]/manage-users/roles/[id]', '/:role/manage-users/roles/:id', { role: ParamValue<true>, id: ParamValue<true> }, { role: ParamValue<false>, id: ParamValue<false> }>,
    '/[role]/manage-users/users/': RouteRecordInfo<'/[role]/manage-users/users/', '/:role/manage-users/users', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/profile': RouteRecordInfo<'/[role]/profile', '/:role/profile', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/settings/countries': RouteRecordInfo<'/[role]/settings/countries', '/:role/settings/countries', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/settings/currencies': RouteRecordInfo<'/[role]/settings/currencies', '/:role/settings/currencies', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/settings/general': RouteRecordInfo<'/[role]/settings/general', '/:role/settings/general', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/settings/languages': RouteRecordInfo<'/[role]/settings/languages', '/:role/settings/languages', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/vehicles/bus-layouts/': RouteRecordInfo<'/[role]/vehicles/bus-layouts/', '/:role/vehicles/bus-layouts', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/vehicles/bus-layouts/create': RouteRecordInfo<'/[role]/vehicles/bus-layouts/create', '/:role/vehicles/bus-layouts/create', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/vehicles/bus-types/': RouteRecordInfo<'/[role]/vehicles/bus-types/', '/:role/vehicles/bus-types', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/vehicles/buses/': RouteRecordInfo<'/[role]/vehicles/buses/', '/:role/vehicles/buses', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/[role]/vehicles/buses/create': RouteRecordInfo<'/[role]/vehicles/buses/create', '/:role/vehicles/buses/create', { role: ParamValue<true> }, { role: ParamValue<false> }>,
    '/auth/forgot-password': RouteRecordInfo<'/auth/forgot-password', '/auth/forgot-password', Record<never, never>, Record<never, never>>,
    '/auth/login': RouteRecordInfo<'/auth/login', '/auth/login', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/[role]/dashboard/index.vue': {
      routes: '/[role]/dashboard/'
      views: never
    }
    'src/pages/[role]/drivers/index.vue': {
      routes: '/[role]/drivers/'
      views: never
    }
    'src/pages/[role]/eagle-eye/index.vue': {
      routes: '/[role]/eagle-eye/'
      views: never
    }
    'src/pages/[role]/help-and-supports/index.vue': {
      routes: '/[role]/help-and-supports/'
      views: never
    }
    'src/pages/[role]/manage-drivers/index.vue': {
      routes: '/[role]/manage-drivers/'
      views: never
    }
    'src/pages/[role]/manage-drivers/create.vue': {
      routes: '/[role]/manage-drivers/create'
      views: never
    }
    'src/pages/[role]/manage-offers/index.vue': {
      routes: '/[role]/manage-offers/'
      views: never
    }
    'src/pages/[role]/manage-passes/index.vue': {
      routes: '/[role]/manage-passes/'
      views: never
    }
    'src/pages/[role]/manage-trips/[booking]/index.vue': {
      routes: '/[role]/manage-trips/[booking]/'
      views: never
    }
    'src/pages/[role]/manage-users/roles/index.vue': {
      routes: '/[role]/manage-users/roles/'
      views: never
    }
    'src/pages/[role]/manage-users/roles/[id].vue': {
      routes: '/[role]/manage-users/roles/[id]'
      views: never
    }
    'src/pages/[role]/manage-users/users/index.vue': {
      routes: '/[role]/manage-users/users/'
      views: never
    }
    'src/pages/[role]/profile.vue': {
      routes: '/[role]/profile'
      views: never
    }
    'src/pages/[role]/settings/countries.vue': {
      routes: '/[role]/settings/countries'
      views: never
    }
    'src/pages/[role]/settings/currencies.vue': {
      routes: '/[role]/settings/currencies'
      views: never
    }
    'src/pages/[role]/settings/general.vue': {
      routes: '/[role]/settings/general'
      views: never
    }
    'src/pages/[role]/settings/languages.vue': {
      routes: '/[role]/settings/languages'
      views: never
    }
    'src/pages/[role]/vehicles/bus-layouts/index.vue': {
      routes: '/[role]/vehicles/bus-layouts/'
      views: never
    }
    'src/pages/[role]/vehicles/bus-layouts/create.vue': {
      routes: '/[role]/vehicles/bus-layouts/create'
      views: never
    }
    'src/pages/[role]/vehicles/bus-types/index.vue': {
      routes: '/[role]/vehicles/bus-types/'
      views: never
    }
    'src/pages/[role]/vehicles/buses/index.vue': {
      routes: '/[role]/vehicles/buses/'
      views: never
    }
    'src/pages/[role]/vehicles/buses/create.vue': {
      routes: '/[role]/vehicles/buses/create'
      views: never
    }
    'src/pages/auth/forgot-password.vue': {
      routes: '/auth/forgot-password'
      views: never
    }
    'src/pages/auth/login.vue': {
      routes: '/auth/login'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
